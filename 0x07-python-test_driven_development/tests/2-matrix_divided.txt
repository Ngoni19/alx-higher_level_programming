# run test with python3 -m doctest -v ./tests/2-matrix_divided.txt

Import method for test
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

SUCCESS CASES:

Test signed & unsigned ints & floats in list matrix:
     >>> matrix = [[1, 2, 3], [4, 5, 6.4]]
     >>> print(matrix_divided(matrix, 2))
     [[0.5, 1.0, 1.5], [2.0, 2.5, 3.2]]

     >>> matrix = [[1, 2, 3], [4, 5, 6.8]]
     >>> print(matrix_divided(matrix, float("inf")))
     [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

     >>> matrix = [[-1.2], [-2.9]]
     >>> print(matrix_divided(matrix, 2.5))
     [[-0.48], [-1.16]]

     >>> matrix = [[True], [False]]
     >>> print(matrix_divided(matrix, True))
     [[1.0], [0.0]]

FAIL CASES:

Test an Empty matrix:
     >>> print(matrix_divided(None, 2))
     Traceback (most recent call last):
     ...
     TypeError: matrix must be a matrix (list of lists) of integers/floats

     >>> matrix = []
     >>> print(matrix_divided(matrix, 6))
     Traceback (most recent call last):
     ...
     TypeError: matrix must be a matrix (list of lists) of integers/floats

     >>> matrix = [[], [], []]
     >>> print(matrix_divided(matrix, 2))
     Traceback (most recent call last):
     ...
     TypeError: matrix must be a matrix (list of lists) of integers/floats

Test different sized lists in matrix:
     >>> matrix = [[1, 2, 9], [2]]
     >>> print(matrix_divided(matrix, 2))
     Traceback (most recent call last):
     ...
     TypeError: Each row of the matrix must have the same size

     >>> matrix = [[2, 8, 9], [4, 3, 1], [5]]
     >>> print(matrix_divided(matrix, 2))
     Traceback (most recent call last):
     ...
     TypeError: Each row of the matrix must have the same size

Test matrix with different data types:
     >>> matrix = [["Whats"], ["up!"]]
     >>> print(matrix_divided(matrix, 2))
     Traceback (most recent call last):
     ...
     TypeError: matrix must be a matrix (list of lists) of integers/floats

     >>> matrix = [[2, 4, 7], {"first_num" : 4}]
     >>> print(matrix_divided(matrix, 2))
     Traceback (most recent call last):
     ...
     TypeError: matrix must be a matrix (list of lists) of integers/floats

     >>> matrix = [[2, 4], 6, {8, 1}]
     >>> print(matrix_divided(matrix, 2))
     Traceback (most recent call last):
     ...
     TypeError: matrix must be a matrix (list of lists) of integers/floats

     >>> matrix = {3, 4, 5, 6}
     >>> print(matrix_divided(matrix, 2))
     Traceback (most recent call last):
     ...
     TypeError: matrix must be a matrix (list of lists) of integers/floats

     >>> matrix = ([1, 2], [3, 4])
     >>> print(matrix_divided(matrix, 2))
     Traceback (most recent call last):
     ...
     TypeError: matrix must be a matrix (list of lists) of integers/floats

     >>> matrix = [[1, 2], [3, (4, 5)]]
     >>> print(matrix_divided(matrix, 2))
     Traceback (most recent call last):
     ...
     TypeError: matrix must be a matrix (list of lists) of integers/floats

Test more args:
     >>> matrix = [[1, 2, 3], [4, 5, 6.7]]
     >>> print(matrix_divided(matrix, 2, 100))
     Traceback (most recent call last):
     ...
     TypeError: matrix_divided() takes 2 positional arguments but 3 were given
	 
Test divisor  as 0 or non-int or non-float:
     >>> matrix = [[4, 8], [9, 4]]
     >>> print(matrix_divided(matrix, 0))
     Traceback (most recent call last):
     ...
     ZeroDivisionError: division by zero

     >>> matrix = [[1, 2], [3, 4]]
     >>> print(matrix_divided(matrix, "2"))
     Traceback (most recent call last):
     ...
     TypeError: div must be a number
	 
Test very few args
     >>> matrix = [[1, 2], [3, 4]]
     >>> print(matrix_divided(matrix))
     Traceback (most recent call last):
     ...
     TypeError: matrix_divided() missing 1 required positional argument: 'div'
